#!/bin/bash

echo -e "Updating";

sudo apt -qq -y update;
sudo apt -qq -y upgrade;

echo -e "\n\nInstalling packages";

sudo apt -qq -y install nginx libnginx-mod-rtmp ffmpeg build-essential;

echo -e "\n\nConfig NGINX";

sleep 1;

sudo echo -e "
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
		worker_connections 768;
}

http {
	   sendfile on;
	   tcp_nopush on;
	   types_hash_max_size 2048;
	   
	   
	   include /etc/nginx/mime.types;
	   default_type application/octet-stream;
	   
	   access_log /var/log/nginx/access.log;
	   error_log /var/log/nginx/error.log;
	   
	   gzip on;
	   
	   include /etc/nginx/conf.d/*.conf;
	   include /etc/nginx/sites-enabled/*;
}

rtmp {
       include /etc/nginx/rtmpconf.d/*.conf;
}
" > nginx.conf;

sudo mv nginx.conf /etc/nginx/nginx.conf;

echo -e "\nRTMP config";

sleep 1;

sudo mkdir /etc/nginx/rtmpconf.d > /dev/null 2>&1;

sudo echo -e "
server {
         listen 1935;
		 chunk_size 4096;
		 
		 application live {
		      live on;
			  record off;
			  
			  push rtmp://localhost/dash/;
			  push rtmp://localhost/hls/;
		}
		
		 application hls {
		      allow publish 127.0.0.1;
			  deny publish all;
			  
			  live on;
			  record all;
			  record path /var/www/html/rec;
			  exec_record_done ffmpeg -y -i \$path -acodec libmp3lame -ar 44100 -ac 1 -vcodec libx264 /var/www/html/rec/\$basename.mp4 -vframes 1 /var/www/html/rec/\$basename.jpg;
			  
			  hls on;
			  hls_path /var/www/html/hls;
			  hls_fragment 3;
			  hls_playlist_length 60;
		}
		
		 application dash {
		      allow publish 127.0.0.1;
			  deny publish all;
			  
			  live on;
			  record off;
			  
			  dash on;
			  dash_path /var/www/html/dash;
		}
		
		application vod {
		      play /var/www/html/rec;
		}
}
" > stream.conf;

sudo mv stream.conf /etc/nginx/rtmpconf.d;

echo -e "\nHTML stuff happening now";

sleep 1;

sudo rm -R /var/www/html/* > /dev/null 2>&1;

sudo mkdir /var/www/html/hls;
sudo mkdir /var/www/html/dash;
sudo mkdir /var/www/html/rec;

sudo find /var/www/html -type d -exec chmod 777 {} \;

sleep 1;

sudo wget https://raw.githubusercontent.com/dust555/MediaNetworks/main/HttpStreaming/dash.all.js > /dev/null 2>&1;
sudo wget https://raw.githubusercontent.com/dust555/MediaNetworks/main/HttpStreaming/dash.html > /dev/null 2>&1;
sudo wget https://raw.githubusercontent.com/dust555/MediaNetworks/main/HttpStreaming/dash.php > /dev/null 2>&1;
sudo wget https://raw.githubusercontent.com/dust555/MediaNetworks/main/HttpStreaming/hls.html > /dev/null 2>&1;
sudo wget https://raw.githubusercontent.com/dust555/MediaNetworks/main/HttpStreaming/hls.js > /dev/null 2>&1;
sudo wget https://raw.githubusercontent.com/dust555/MediaNetworks/main/HttpStreaming/hls.php > /dev/null 2>&1;

sudo mv dash.all.js /var/www/html > /dev/null 2>&1;
sudo mv dash.html /var/www/html > /dev/null 2>&1;
sudo mv dash.php /var/www/html > /dev/null 2>&1;
sudo mv hls.html /var/www/html > /dev/null 2>&1;
sudo mv hls.js /var/www/html > /dev/null 2>&1;
sudo mv hls.php /var/www/html > /dev/null 2>&1;

echo -e "\n";
 #this is without ssl certificates as a test
 
echo -e "
server {
        listen 80 default_server;
		listen [::]:80 default_server;
		
		# SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files \$uri \$uri/ =404;
        }
        location ~* \.(?:html)$ {
                add_header Cache-Control: public;
        }
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
                expires 1M;
                add_header Cache-Control: public;
        }
        location ~* \.(?:css|js)$ {
                expires 1y;
                add_header Cache-Control: public;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # if apache concurs with nginx
        #location ~ /\.ht {
        #       deny all;
        #}
}" > /etc/nginx/sites-available/default;

echo -e "\nRestarting NGINX";

sudo systemctl restart nginx;
exit 0;
